////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.2
//  \   \         Application : sch2hdl
//  /   /         Filename : usart_receiver.vf
// /___/   /\     Timestamp : 05/05/2015 03:17:25
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan3e -verilog D:/xilinx_fpga/USART_updated_3may/usart_receiver.vf -w D:/xilinx_fpga/USART_updated_3may/usart_receiver.sch
//Design Name: usart_receiver
//Device: spartan3e
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module Reg_4bit_MUSER_usart_receiver(CE, 
                                     CLEAR, 
                                     CLOCK, 
                                     I_0, 
                                     I_1, 
                                     I_2, 
                                     I_3, 
                                     O_0, 
                                     O_1, 
                                     O_2, 
                                     O_3);

    input CE;
    input CLEAR;
    input CLOCK;
    input I_0;
    input I_1;
    input I_2;
    input I_3;
   output O_0;
   output O_1;
   output O_2;
   output O_3;
   
   
   FDCE #( .INIT(1'b0) ) XLXI_11 (.C(CLOCK), 
                 .CE(CE), 
                 .CLR(CLEAR), 
                 .D(I_3), 
                 .Q(O_3));
   FDCE #( .INIT(1'b0) ) XLXI_12 (.C(CLOCK), 
                 .CE(CE), 
                 .CLR(CLEAR), 
                 .D(I_2), 
                 .Q(O_2));
   FDCE #( .INIT(1'b0) ) XLXI_13 (.C(CLOCK), 
                 .CE(CE), 
                 .CLR(CLEAR), 
                 .D(I_1), 
                 .Q(O_1));
   FDCE #( .INIT(1'b0) ) XLXI_14 (.C(CLOCK), 
                 .CE(CE), 
                 .CLR(CLEAR), 
                 .D(I_0), 
                 .Q(O_0));
endmodule
`timescale 1ns / 1ps

module Add_sub_4bit_MUSER_usart_receiver(add_0, 
                                         I_0, 
                                         I_1, 
                                         I_2, 
                                         I_3, 
                                         O_0, 
                                         O_1, 
                                         O_2, 
                                         O_3);

    input add_0;
    input I_0;
    input I_1;
    input I_2;
    input I_3;
   output O_0;
   output O_1;
   output O_2;
   output O_3;
   
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_52;
   wire XLXN_55;
   wire XLXN_57;
   wire XLXN_63;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_66;
   
   XOR2  XLXI_1 (.I0(add_0), 
                .I1(I_3), 
                .O(XLXN_2));
   XOR2  XLXI_2 (.I0(add_0), 
                .I1(I_2), 
                .O(XLXN_3));
   XOR2  XLXI_3 (.I0(add_0), 
                .I1(I_1), 
                .O(XLXN_4));
   INV  XLXI_4 (.I(XLXN_52), 
               .O(XLXN_63));
   XOR2  XLXI_9 (.I0(add_0), 
                .I1(I_0), 
                .O(XLXN_52));
   XOR2  XLXI_10 (.I0(XLXN_4), 
                 .I1(XLXN_52), 
                 .O(XLXN_64));
   XOR2  XLXI_15 (.I0(XLXN_2), 
                 .I1(XLXN_57), 
                 .O(XLXN_66));
   XOR2  XLXI_16 (.I0(XLXN_3), 
                 .I1(XLXN_55), 
                 .O(XLXN_65));
   AND2  XLXI_34 (.I0(XLXN_3), 
                 .I1(XLXN_55), 
                 .O(XLXN_57));
   AND2  XLXI_35 (.I0(XLXN_4), 
                 .I1(XLXN_52), 
                 .O(XLXN_55));
   XOR2  XLXI_38 (.I0(add_0), 
                 .I1(XLXN_63), 
                 .O(O_0));
   XOR2  XLXI_39 (.I0(add_0), 
                 .I1(XLXN_64), 
                 .O(O_1));
   XOR2  XLXI_40 (.I0(add_0), 
                 .I1(XLXN_65), 
                 .O(O_2));
   XOR2  XLXI_41 (.I0(add_0), 
                 .I1(XLXN_66), 
                 .O(O_3));
endmodule
`timescale 1ns / 1ps

module nin_counter_MUSER_usart_receiver(CLEAR, 
                                        CLK, 
                                        OUT_f);

    input CLEAR;
    input CLK;
   output OUT_f;
   
   wire cllr;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_78;
   wire XLXN_106;
   wire XLXN_109;
   wire XLXN_110;
   wire XLXN_111;
   wire XLXN_113;
   wire XLXN_114;
   wire XLXN_122;
   wire XLXN_125;
   wire XLXN_126;
   wire XLXN_208;
   wire XLXN_209;
   wire XLXN_210;
   wire OUT_f_DUMMY;
   
   assign OUT_f = OUT_f_DUMMY;
   GND  XLXI_1 (.G(XLXN_106));
   Add_sub_4bit_MUSER_usart_receiver  XLXI_3 (.add_0(XLXN_106), 
                                             .I_0(XLXN_109), 
                                             .I_1(XLXN_48), 
                                             .I_2(XLXN_49), 
                                             .I_3(XLXN_78), 
                                             .O_0(XLXN_113), 
                                             .O_1(XLXN_110), 
                                             .O_2(XLXN_111), 
                                             .O_3(XLXN_114));
   NAND4  XLXI_45 (.I0(XLXN_210), 
                  .I1(XLXN_208), 
                  .I2(XLXN_209), 
                  .I3(XLXN_78), 
                  .O(OUT_f_DUMMY));
   INV  XLXI_46 (.I(XLXN_49), 
                .O(XLXN_209));
   Reg_4bit_MUSER_usart_receiver  XLXI_49 (.CE(OUT_f_DUMMY), 
                                          .CLEAR(cllr), 
                                          .CLOCK(CLK), 
                                          .I_0(XLXN_113), 
                                          .I_1(XLXN_110), 
                                          .I_2(XLXN_111), 
                                          .I_3(XLXN_114), 
                                          .O_0(XLXN_109), 
                                          .O_1(XLXN_48), 
                                          .O_2(XLXN_49), 
                                          .O_3(XLXN_78));
   FD #( .INIT(1'b0) ) XLXI_50 (.C(CLK), 
               .D(XLXN_122), 
               .Q(XLXN_126));
   FD #( .INIT(1'b0) ) XLXI_51 (.C(CLK), 
               .D(CLEAR), 
               .Q(XLXN_122));
   INV  XLXI_52 (.I(XLXN_126), 
                .O(XLXN_125));
   AND2  XLXI_53 (.I0(XLXN_122), 
                 .I1(XLXN_125), 
                 .O(cllr));
   INV  XLXI_55 (.I(XLXN_48), 
                .O(XLXN_208));
   INV  XLXI_56 (.I(XLXN_109), 
                .O(XLXN_210));
endmodule
`timescale 1ns / 1ps

module SIPO_reg_MUSER_usart_receiver(CE, 
                                     CLK, 
                                     CLR, 
                                     Serial_input, 
                                     O_0, 
                                     O_1, 
                                     O_2, 
                                     O_3, 
                                     O_4, 
                                     O_5, 
                                     O_6, 
                                     O_7, 
                                     parity, 
                                     start_bit);

    input CE;
    input CLK;
    input CLR;
    input Serial_input;
   output O_0;
   output O_1;
   output O_2;
   output O_3;
   output O_4;
   output O_5;
   output O_6;
   output O_7;
   output parity;
   output start_bit;
   
   wire O_0_DUMMY;
   wire O_1_DUMMY;
   wire O_2_DUMMY;
   wire O_3_DUMMY;
   wire O_4_DUMMY;
   wire O_5_DUMMY;
   wire O_6_DUMMY;
   wire O_7_DUMMY;
   wire parity_DUMMY;
   
   assign O_0 = O_0_DUMMY;
   assign O_1 = O_1_DUMMY;
   assign O_2 = O_2_DUMMY;
   assign O_3 = O_3_DUMMY;
   assign O_4 = O_4_DUMMY;
   assign O_5 = O_5_DUMMY;
   assign O_6 = O_6_DUMMY;
   assign O_7 = O_7_DUMMY;
   assign parity = parity_DUMMY;
   FDRE #( .INIT(1'b0) ) XLXI_1 (.C(CLK), 
                .CE(CE), 
                .D(Serial_input), 
                .R(CLR), 
                .Q(parity_DUMMY));
   FDRE #( .INIT(1'b0) ) XLXI_2 (.C(CLK), 
                .CE(CE), 
                .D(parity_DUMMY), 
                .R(CLR), 
                .Q(O_7_DUMMY));
   FDRE #( .INIT(1'b0) ) XLXI_3 (.C(CLK), 
                .CE(CE), 
                .D(O_7_DUMMY), 
                .R(CLR), 
                .Q(O_6_DUMMY));
   FDRE #( .INIT(1'b0) ) XLXI_4 (.C(CLK), 
                .CE(CE), 
                .D(O_6_DUMMY), 
                .R(CLR), 
                .Q(O_5_DUMMY));
   FDRE #( .INIT(1'b0) ) XLXI_5 (.C(CLK), 
                .CE(CE), 
                .D(O_5_DUMMY), 
                .R(CLR), 
                .Q(O_4_DUMMY));
   FDRE #( .INIT(1'b0) ) XLXI_6 (.C(CLK), 
                .CE(CE), 
                .D(O_4_DUMMY), 
                .R(CLR), 
                .Q(O_3_DUMMY));
   FDRE #( .INIT(1'b0) ) XLXI_7 (.C(CLK), 
                .CE(CE), 
                .D(O_3_DUMMY), 
                .R(CLR), 
                .Q(O_2_DUMMY));
   FDRE #( .INIT(1'b0) ) XLXI_8 (.C(CLK), 
                .CE(CE), 
                .D(O_2_DUMMY), 
                .R(CLR), 
                .Q(O_1_DUMMY));
   FDRE #( .INIT(1'b0) ) XLXI_9 (.C(CLK), 
                .CE(CE), 
                .D(O_1_DUMMY), 
                .R(CLR), 
                .Q(O_0_DUMMY));
   FDRE #( .INIT(1'b0) ) XLXI_10 (.C(CLK), 
                 .CE(CE), 
                 .D(O_0_DUMMY), 
                 .R(CLR), 
                 .Q(start_bit));
endmodule
`timescale 1ns / 1ps

module Parity_gen_MUSER_usart_receiver(I_0, 
                                       I_1, 
                                       I_2, 
                                       I_3, 
                                       I_4, 
                                       I_5, 
                                       I_6, 
                                       I_7, 
                                       PARITY);

    input I_0;
    input I_1;
    input I_2;
    input I_3;
    input I_4;
    input I_5;
    input I_6;
    input I_7;
   output PARITY;
   
   wire XLXN_1;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_10;
   
   XOR2  XLXI_1 (.I0(I_1), 
                .I1(I_0), 
                .O(XLXN_1));
   XOR2  XLXI_2 (.I0(I_3), 
                .I1(I_2), 
                .O(XLXN_7));
   XOR2  XLXI_3 (.I0(I_5), 
                .I1(I_4), 
                .O(XLXN_3));
   XOR2  XLXI_4 (.I0(I_7), 
                .I1(I_6), 
                .O(XLXN_6));
   XOR2  XLXI_5 (.I0(XLXN_7), 
                .I1(XLXN_1), 
                .O(XLXN_4));
   XOR2  XLXI_7 (.I0(XLXN_6), 
                .I1(XLXN_3), 
                .O(XLXN_10));
   XOR2  XLXI_8 (.I0(XLXN_10), 
                .I1(XLXN_4), 
                .O(PARITY));
endmodule
`timescale 1ns / 1ps

module usart_receiver(CLK, 
                      Serial_input, 
                      O_0, 
                      O_1, 
                      O_2, 
                      O_3, 
                      O_4, 
                      O_5, 
                      O_6, 
                      O_7, 
                      Parity_ERR);

    input CLK;
    input Serial_input;
   output O_0;
   output O_1;
   output O_2;
   output O_3;
   output O_4;
   output O_5;
   output O_6;
   output O_7;
   output Parity_ERR;
   
   wire dec;
   wire par;
   wire XLXN_63;
   wire XLXN_75;
   wire XLXN_123;
   wire O_0_DUMMY;
   wire O_1_DUMMY;
   wire O_2_DUMMY;
   wire O_3_DUMMY;
   wire O_4_DUMMY;
   wire O_5_DUMMY;
   wire O_6_DUMMY;
   wire O_7_DUMMY;
   
   assign O_0 = O_0_DUMMY;
   assign O_1 = O_1_DUMMY;
   assign O_2 = O_2_DUMMY;
   assign O_3 = O_3_DUMMY;
   assign O_4 = O_4_DUMMY;
   assign O_5 = O_5_DUMMY;
   assign O_6 = O_6_DUMMY;
   assign O_7 = O_7_DUMMY;
   Parity_gen_MUSER_usart_receiver  XLXI_14 (.I_0(O_7_DUMMY), 
                                            .I_1(O_6_DUMMY), 
                                            .I_2(O_5_DUMMY), 
                                            .I_3(O_4_DUMMY), 
                                            .I_4(O_3_DUMMY), 
                                            .I_5(O_2_DUMMY), 
                                            .I_6(O_1_DUMMY), 
                                            .I_7(O_0_DUMMY), 
                                            .PARITY(XLXN_63));
   XOR2  XLXI_16 (.I0(XLXN_63), 
                 .I1(par), 
                 .O(Parity_ERR));
   GND  XLXI_25 (.G(XLXN_75));
   NOR2  XLXI_52 (.I0(dec), 
                 .I1(Serial_input), 
                 .O(XLXN_123));
   SIPO_reg_MUSER_usart_receiver  XLXI_54 (.CE(dec), 
                                          .CLK(CLK), 
                                          .CLR(XLXN_75), 
                                          .Serial_input(Serial_input), 
                                          .O_0(O_0_DUMMY), 
                                          .O_1(O_1_DUMMY), 
                                          .O_2(O_2_DUMMY), 
                                          .O_3(O_3_DUMMY), 
                                          .O_4(O_4_DUMMY), 
                                          .O_5(O_5_DUMMY), 
                                          .O_6(O_6_DUMMY), 
                                          .O_7(O_7_DUMMY), 
                                          .parity(par), 
                                          .start_bit());
   nin_counter_MUSER_usart_receiver  XLXI_57 (.CLEAR(XLXN_123), 
                                             .CLK(CLK), 
                                             .OUT_f(dec));
endmodule
